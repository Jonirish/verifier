// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CarvProtocalServicecampaign is an auto generated low-level Go binding around an user-defined struct.
type CarvProtocalServicecampaign struct {
	CampaignId        string
	Url               string
	Creator           common.Address
	CampaignType      uint8
	RewardContract    common.Address
	RewardTotalAmount *big.Int
	RewardCount       *big.Int
	Status            uint8
	StartTime         *big.Int
	EndTime           *big.Int
	Requirements      string
}

// CarvProtocalServicereward is an auto generated low-level Go binding around an user-defined struct.
type CarvProtocalServicereward struct {
	CampaignId      string
	UserAddress     common.Address
	RewardAmount    *big.Int
	TotalNum        *big.Int
	ContractAddress common.Address
	ContractType    uint8
}

// CarvProtocalServiceuser is an auto generated low-level Go binding around an user-defined struct.
type CarvProtocalServiceuser struct {
	TokenId         *big.Int
	UserProfilePath string
	ProfileVersion  *big.Int
	Signature       []byte
}

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"PackedPtrLen__LenOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PackedPtrLen__PtrOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Slice__OutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tee_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaign_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"attestation_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"attestation\",\"type\":\"string\"}],\"name\":\"ReportTeeAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identitiesRoot\",\"type\":\"bytes32\"}],\"name\":\"SetIdentitiesRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaign_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"requirements\",\"type\":\"string\"}],\"name\":\"SubmitCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"carv_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaign_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaign_info\",\"type\":\"string\"}],\"name\":\"UserCampaignData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"attestation_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"VerifyAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"attestation_ids\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"results\",\"type\":\"bool[]\"}],\"name\":\"VerifyAttestationBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewards_address\",\"type\":\"address\"}],\"name\":\"__CarvProtocalService_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tee_address\",\"type\":\"address\"}],\"name\":\"add_tee_role\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier_address\",\"type\":\"address\"}],\"name\":\"add_verifier_role\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getIdentitiesRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestation_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"attestation_address\",\"type\":\"address\"}],\"name\":\"get_attestation_result\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"}],\"name\":\"get_mint_by_address\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_proof_list\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"}],\"name\":\"get_user_by_address\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"user_profile_path\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"profile_version\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structCarvProtocalService.user\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"carv_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"campaign_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"join_campaign_info\",\"type\":\"string\"}],\"name\":\"join_campaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"campaign_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attestation\",\"type\":\"string\"}],\"name\":\"report_tee_attestation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"multiIdentitiesRoot\",\"type\":\"bytes32\"}],\"name\":\"setIdentitiesRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"user_profile_path\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"profile_version\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"multiIdentitiesRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"set_identities_root\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"campaign_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_num\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"contract_type\",\"type\":\"uint8\"}],\"internalType\":\"structCarvProtocalService.reward\",\"name\":\"reward_info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"campaign_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"campaign_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reward_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward_total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_count\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"requirements\",\"type\":\"string\"}],\"internalType\":\"structCarvProtocalService.campaign\",\"name\":\"campaign_info\",\"type\":\"tuple\"}],\"name\":\"submit_campaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sigAddress\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"userIDs\",\"type\":\"string[]\"},{\"internalType\":\"bytes32\",\"name\":\"multiIdentitiesRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyIdentitiesBinding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestation_id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"verify_attestation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"attestation_ids\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"results\",\"type\":\"bool[]\"}],\"name\":\"verify_attestation_batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614194806100206000396000f3fe6080604052600436106101b55760003560e01c806301ffc9a7146101ba57806306fdde03146101ef578063081812fc14610211578063095ea7b31461024957806309a9c7f01461026b5780631a7f99551461028b57806323b872dd146102ab578063248a9ca3146102cb5780632f2ff15d146102f957806336568abe146103195780633736c83f1461033957806342842e0e1461034c57806345692b821461036c578063495eb8281461039957806349d03037146103bb578063578907ca146103db5780635a11aa64146103fb5780636352211e1461041b57806370a082311461043b57806391d148541461045b57806395d89b411461047b578063964b1f6e14610490578063a217fddf146104b2578063a22cb465146104c7578063a35d20be146104e7578063ad86d54514610507578063b88d4fde14610527578063c180ae2a14610547578063c1f7584814610567578063c8186fc214610587578063c87b56dd146105cd578063d0def521146105ed578063d547741f1461060d578063da7a29281461062d578063e7705db61461065a578063e97a99871461067c578063e985e9c51461069c578063ff30a118146106bc575b600080fd5b3480156101c657600080fd5b506101da6101d5366004612ec0565b6106dc565b60405190151581526020015b60405180910390f35b3480156101fb57600080fd5b506102046106ed565b6040516101e69190612f2d565b34801561021d57600080fd5b5061023161022c366004612f40565b61077f565b6040516001600160a01b0390911681526020016101e6565b34801561025557600080fd5b50610269610264366004612f6e565b6107a6565b005b34801561027757600080fd5b50610269610286366004612fdb565b6108c0565b34801561029757600080fd5b506102696102a6366004613054565b610927565b3480156102b757600080fd5b506102696102c63660046130e9565b6109a8565b3480156102d757600080fd5b506102eb6102e6366004612f40565b6109d9565b6040519081526020016101e6565b34801561030557600080fd5b5061026961031436600461312a565b6109ee565b34801561032557600080fd5b5061026961033436600461312a565b610a0a565b61026961034736600461315a565b610a88565b34801561035857600080fd5b506102696103673660046130e9565b610b66565b34801561037857600080fd5b506102eb610387366004612f40565b60009081526097602052604090205490565b3480156103a557600080fd5b506102eb6000805160206140ff83398151915281565b3480156103c757600080fd5b506101da6103d636600461327f565b610b81565b3480156103e757600080fd5b506102696103f6366004613396565b610cc0565b34801561040757600080fd5b506102696104163660046133bb565b610d50565b34801561042757600080fd5b50610231610436366004612f40565b610e94565b34801561044757600080fd5b506102eb6104563660046133bb565b610ec8565b34801561046757600080fd5b506101da61047636600461312a565b610f4e565b34801561048757600080fd5b50610204610f79565b34801561049c57600080fd5b506104a5610f88565b6040516101e691906133d8565b3480156104be57600080fd5b506102eb600081565b3480156104d357600080fd5b506102696104e236600461341c565b610fdf565b3480156104f357600080fd5b506102696105023660046133bb565b610fea565b34801561051357600080fd5b506102696105223660046133bb565b61100d565b34801561053357600080fd5b5061026961054236600461344a565b61102d565b34801561055357600080fd5b506102046105623660046133bb565b611065565b34801561057357600080fd5b5061026961058236600461350d565b611122565b34801561059357600080fd5b506101da6105a236600461312a565b600091825260d8602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156105d957600080fd5b506102046105e8366004612f40565b61122f565b3480156105f957600080fd5b50610269610608366004613578565b6112a3565b34801561061957600080fd5b5061026961062836600461312a565b61138d565b34801561063957600080fd5b5061064d6106483660046133bb565b6113a9565b6040516101e691906135c7565b34801561066657600080fd5b506102eb60008051602061413f83398151915281565b34801561068857600080fd5b5061026961069736600461361d565b611536565b3480156106a857600080fd5b506101da6106b736600461367c565b6115c7565b3480156106c857600080fd5b506102696106d73660046136aa565b6115f5565b60006106e78261163d565b92915050565b6060606580546106fc906136cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610728906136cc565b80156107755780601f1061074a57610100808354040283529160200191610775565b820191906000526020600020905b81548152906001019060200180831161075857829003601f168201915b5050505050905090565b600061078a82611662565b506000908152606960205260409020546001600160a01b031690565b60006107b182610e94565b9050806001600160a01b0316836001600160a01b0316036108235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061083f575061083f81336115c7565b6108b15760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161081a565b6108bb8383611687565b505050565b60d085905560d16108d2848683613763565b5060d26108e0828483613763565b507f83eda6edb918aac3f35c8d616a6198dbb75eeca3248e0efec05e66a30d51119160d05460d160d260405161091893929190613899565b60405180910390a15050505050565b6001600160a01b038716600090815260d66020526040902060010161094d868883613763565b506001600160a01b038716600090815260d6602052604090206002810185905560030161097b828483613763565b506001600160a01b038716600090815260d6602052604090205461099f90846115f5565b50505050505050565b6109b233826116f5565b6109ce5760405162461bcd60e51b815260040161081a906138c4565b6108bb838383611754565b60009081526099602052604090206001015490565b6109f7826109d9565b610a00816118a6565b6108bb83836118b0565b6001600160a01b0381163314610a7a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161081a565b610a848282611936565b5050565b610a92823361199d565b8060d4610a9f8280613911565b604051610aad929190613957565b908152604051908190036020019020610ac682826139a7565b5082905060d3610ad68280613911565b604051610ae4929190613957565b908152604051908190036020019020610afd8282613aa4565b507fe8e692af5f416c4637c9307d7f08b7697fd8f4398f55103ce03ddd9388ccd84d9050610b3160a08401608085016133bb565b610b3b8380613911565b610b49610140860186613911565b604051610b5a959493929190613bdc565b60405180910390a15050565b6108bb8383836040518060200160405280600081525061102d565b6000866001600160a01b0316610b9689610e94565b6001600160a01b031614610be75760405162461bcd60e51b81526020600482015260186024820152771b999d081bdddb995c881a5cc81b9bdd0818dbdc9c9958dd60421b604482015260640161081a565b845180610c2f5760405162461bcd60e51b81526020600482015260166024820152757573657249442063616e6e6f7420626520656d70747960501b604482015260640161081a565b60005b81811015610c6e57610c5c878281518110610c4f57610c4f613c20565b6020026020010151611a3d565b80610c6681613c4c565b915050610c32565b506000610cb2888787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ca992505050565b9a9950505050505050505050565b610cc8611d0a565b610cd182611d7a565b610ced5760405162461bcd60e51b815260040161081a90613c65565b600082815260d8602090815260408083203380855290835292819020805460ff191685151590811790915581519384529183018590528201527f937b4d1b5b461852fdbbb174b68adefb42155e668c05a1261fae11a2d22a240a90606001610b5a565b600054610100900460ff1615808015610d705750600054600160ff909116105b80610d915750610d7f30611dd0565b158015610d91575060005460ff166001145b610df45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161081a565b6000805460ff191660011790558015610e17576000805461ff0019166101001790555b60cc8054336001600160a01b0319918216811790925560cb80549091166001600160a01b038516179055600160cd55610e5290600090611ddf565b8015610a84576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610b5a565b600080610ea083611de9565b90506001600160a01b0381166106e75760405162461bcd60e51b815260040161081a90613c97565b60006001600160a01b038216610f325760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161081a565b506001600160a01b031660009081526068602052604090205490565b60009182526099602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060606680546106fc906136cc565b606060d980548060200260200160405190810160405280929190818152602001828054801561077557602002820191906000526020600020905b815481526020019060010190808311610fc2575050505050905090565b610a84338383611e04565b610ff2611ece565b61100a6000805160206140ff83398151915282611ddf565b50565b611015611ece565b61100a60008051602061413f83398151915282611ddf565b61103733836116f5565b6110535760405162461bcd60e51b815260040161081a906138c4565b61105f84848484611f25565b50505050565b6001600160a01b038116600090815260cf602090815260408083205480845260ce9092529091208054606092919061109c906136cc565b80601f01602080910402602001604051908101604052809291908181526020018280546110c8906136cc565b80156111155780601f106110ea57610100808354040283529160200191611115565b820191906000526020600020905b8154815290600101906020018083116110f857829003601f168201915b5050505050915050919050565b61112a611d0a565b8260005b818110156111f75761115786868381811061114b5761114b613c20565b90506020020135611d7a565b6111735760405162461bcd60e51b815260040161081a90613c65565b83838281811061118557611185613c20565b905060200201602081019061119a9190613cc9565b60d860008888858181106111b0576111b0613c20565b6020908102929092013583525081810192909252604090810160009081203382529092529020805460ff1916911515919091179055806111ef81613c4c565b91505061112e565b507f04798cc2c828443d2d9ef127deaa1f73e782d8a9fffbc9db2bcca53e12765af53386868686604051610918959493929190613ce6565b606061123a82611662565b600061125160408051602081019091526000815290565b90506000815111611271576040518060200160405280600081525061129c565b8061127b84611f58565b60405160200161128c929190613d6a565b6040516020818303038152906040525b9392505050565b6112ac82610ec8565b156112f45760405162461bcd60e51b8152602060048201526018602482015277323ab83634b1b0ba329036b4b73a1032bc31b2b83a34b7b760411b604482015260640161081a565b6113008260cd54611fea565b60cd54600090815260ce6020526040902061131b8282613d99565b5060cd546001600160a01b038316600081815260cf602090815260409182902084905581519283528201929092527f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe910160405180910390a160cd805490600061138483613c4c565b91905055505050565b611396826109d9565b61139f816118a6565b6108bb8383611936565b6113d46040518060800160405280600081526020016060815260200160008152602001606081525090565b6001600160a01b038216600090815260d66020908152604091829020825160808101909352805483526001810180549192840191611411906136cc565b80601f016020809104026020016040519081016040528092919081815260200182805461143d906136cc565b801561148a5780601f1061145f5761010080835404028352916020019161148a565b820191906000526020600020905b81548152906001019060200180831161146d57829003601f168201915b50505050508152602001600282015481526020016003820180546114ad906136cc565b80601f01602080910402602001604051908101604052809291908181526020018280546114d9906136cc565b80156115265780601f106114fb57610100808354040283529160200191611526565b820191906000526020600020905b81548152906001019060200180831161150957829003601f168201915b5050505050815250509050919050565b61153e6120e5565b60008282604051611550929190613957565b60405190819003812060d980546001810182556000919091527fcc6782fd46dd71c5f512301ab049782450b4eaf79fdac5443d93d274d39167860181905591507f99a038e9d345d0b12130b3b1fb003bf8f2d3a5c27ce2a800bbb1608efff6c5919061091890339088908890869089908990613e52565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b60008281526097602090815260409182902083905581518481529081018390527f21b5a040ca6f61b8bcacb8f423e25ce46e88932f887ce92e60343369c20ec06f9101610b5a565b60006001600160e01b03198216637965db0b60e01b14806106e757506106e782612148565b61166b8161216d565b61100a5760405162461bcd60e51b815260040161081a90613c97565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906116bc82610e94565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061170183610e94565b9050806001600160a01b0316846001600160a01b03161480611728575061172881856115c7565b8061174c5750836001600160a01b03166117418461077f565b6001600160a01b0316145b949350505050565b826001600160a01b031661176782610e94565b6001600160a01b03161461178d5760405162461bcd60e51b815260040161081a90613e9d565b6001600160a01b0382166117ef5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161081a565b826001600160a01b031661180282610e94565b6001600160a01b0316146118285760405162461bcd60e51b815260040161081a90613e9d565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652606885528386208054600019019055908716808652838620805460010190558686526067909452828520805490921684179091559051849360008051602061411f83398151915291a4505050565b61100a813361218a565b6118ba8282610f4e565b610a845760008281526099602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118f23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119408282610f4e565b15610a845760008281526099602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006119af60a08401608085016133bb565b60cc549091506119d090829084906001600160a01b031660408701356121e3565b7f704db66c978a7472842ddae0d478a8a7d123fb6ad449e4426b5e0f6a22081de7611a0160a08501608086016133bb565b60cc54604080516001600160a01b03938416815283871660208201529290911682820152850135606082015260800160405180910390a1505050565b6000815111611a885760405162461bcd60e51b81526020600482015260176024820152767573657249442063616e206e6f7420626520656d70747960481b604482015260640161081a565b6040805180820190915260018152601d60f91b602082015260008080611aad8561223d565b9050611ac2611abb8561223d565b8290612248565b9194509250905082611b265760405162461bcd60e51b815260206004820152602760248201527f74686520666972737420706172742064656c696d6974657220646f6573206e6f6044820152661d08195e1a5cdd60ca1b606482015260840161081a565b6000611b3183612297565b5111611b7f5760405162461bcd60e51b815260206004820152601d60248201527f746865206669727374207061727420646f6573206e6f74206578697374000000604482015260640161081a565b611b8b611abb8561223d565b9194509250905082611bf05760405162461bcd60e51b815260206004820152602860248201527f746865207365636f6e6420706172742064656c696d6974657220646f6573206e6044820152671bdd08195e1a5cdd60c21b606482015260840161081a565b6000611bfb83612297565b5111611c495760405162461bcd60e51b815260206004820152601e60248201527f746865207365636f6e64207061727420646f6573206e6f742065786973740000604482015260640161081a565b611c5281612297565b51604014611ca25760405162461bcd60e51b815260206004820152601d60248201527f69642068617368206c656e677468206973206e6f7420636f7272656374000000604482015260640161081a565b5050505050565b6000806000611cb885856122a2565b90925090506000816004811115611cd157611cd1613ee2565b148015611cef5750856001600160a01b0316826001600160a01b0316145b80611d005750611d008686866122e7565b9695505050505050565b611d2260008051602061413f83398151915233610f4e565b611d785760405162461bcd60e51b815260206004820152602160248201527f73656e64657220646f65736e2774206861766520766572696669657220726f6c6044820152606560f81b606482015260840161081a565b565b6000805b60d954811015611dc7578260d98281548110611d9c57611d9c613c20565b906000526020600020015403611db55750600192915050565b80611dbf81613c4c565b915050611d7e565b50600092915050565b6001600160a01b03163b151590565b610a8482826118b0565b6000908152606760205260409020546001600160a01b031690565b816001600160a01b0316836001600160a01b031603611e615760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161081a565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611ed9600033610f4e565b611d785760405162461bcd60e51b815260206004820152601e60248201527f73656e64657220646f65736e277420686176652061646d696e20726f6c650000604482015260640161081a565b611f30848484611754565b611f3c848484846123d3565b61105f5760405162461bcd60e51b815260040161081a90613ef8565b60606000611f65836124db565b60010190506000816001600160401b03811115611f8457611f846131c2565b6040519080825280601f01601f191660200182016040528015611fae576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611fb857509392505050565b6001600160a01b0382166120405760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161081a565b6120498161216d565b156120665760405162461bcd60e51b815260040161081a90613f4a565b61206f8161216d565b1561208c5760405162461bcd60e51b815260040161081a90613f4a565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b03191684179055518392919060008051602061411f833981519152908290a45050565b6120fd6000805160206140ff83398151915233610f4e565b611d785760405162461bcd60e51b815260206004820152601c60248201527b73656e64657220646f65736e277420686176652074656520726f6c6560201b604482015260640161081a565b60006001600160e01b0319821663f389baad60e01b14806106e757506106e7826125b1565b60008061217983611de9565b6001600160a01b0316141592915050565b6121948282610f4e565b610a84576121a181612601565b6121ac836020612613565b6040516020016121bd929190613f80565b60408051601f198184030181529082905262461bcd60e51b825261081a91600401612f2d565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261105f9085906127ae565b60006106e782612900565b60008080806122578686612914565b9050600019810361227357600086600093509350935050612290565b6122888161228087612a2b565b889190612a37565b935093509350505b9250925092565b60606106e782612aa6565b60008082516041036122d85760208301516040840151606085015160001a6122cc87828585612b1b565b945094505050506122e0565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b8686604051602401612311929190613fef565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161234f9190614008565b600060405180830381855afa9150503d806000811461238a576040519150601f19603f3d011682016040523d82523d6000602084013e61238f565b606091505b50915091508180156123a357506020815110155b8015611d0057508051630b135d3f60e11b906123c89083016020908101908401614024565b149695505050505050565b60006123e7846001600160a01b0316611dd0565b156124d057604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061241e90339089908890889060040161403d565b6020604051808303816000875af1925050508015612459575060408051601f3d908101601f1916820190925261245691810190614070565b60015b6124b6573d808015612487576040519150601f19603f3d011682016040523d82523d6000602084013e61248c565b606091505b5080516000036124ae5760405162461bcd60e51b815260040161081a90613ef8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061174c565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061251a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310612544576904ee2d6d415b85acef8160201b830492506020015b662386f26fc10000831061256257662386f26fc10000830492506010015b6305f5e100831061257a576305f5e100830492506008015b612710831061258e57612710830492506004015b606483106125a0576064830492506002015b600a83106106e75760010192915050565b60006001600160e01b031982166380ac58cd60e01b14806125e257506001600160e01b03198216635b5e139f60e01b145b806106e757506301ffc9a760e01b6001600160e01b03198316146106e7565b60606106e76001600160a01b03831660145b6060600061262283600261408d565b61262d9060026140a4565b6001600160401b03811115612644576126446131c2565b6040519080825280601f01601f19166020018201604052801561266e576020820181803683370190505b509050600360fc1b8160008151811061268957612689613c20565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126b8576126b8613c20565b60200101906001600160f81b031916908160001a90535060006126dc84600261408d565b6126e79060016140a4565b90505b600181111561275f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061271b5761271b613c20565b1a60f81b82828151811061273157612731613c20565b60200101906001600160f81b031916908160001a90535060049490941c93612758816140b7565b90506126ea565b50831561129c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161081a565b813b806127f55760405162461bcd60e51b8152602060048201526015602482015274115490cc8c0e881b9bdd08184818dbdb9d1c9858dd605a1b604482015260640161081a565b600080846001600160a01b0316846040516128109190614008565b6000604051808303816000865af19150503d806000811461284d576040519150601f19603f3d011682016040523d82523d6000602084013e612852565b606091505b5091509150816128995760405162461bcd60e51b8152602060048201526012602482015271115490cc8c0e8818d85b1b0819985a5b195960721b604482015260640161081a565b805115611ca257808060200190518101906128b491906140ce565b611ca25760405162461bcd60e51b815260206004820181905260248201527f45524332303a206f7065726174696f6e20646964206e6f742073756363656564604482015260640161081a565b60008060208301905061129c818451612bd5565b60008061292084612a2b565b9050600061292d84612a2b565b905080600003612942576000925050506106e7565b81158061294e57508181115b1561295f57600019925050506106e7565b600061296b8660801c90565b905060006129798660801c90565b90506000612988825160001a90565b90505b6000612998848784612be1565b905060001981036129b35760001996505050505050506106e7565b948590039492830192858511156129d45760001996505050505050506106e7565b84832085852003612a00576129e98960801c90565b6129f390856140eb565b96505050505050506106e7565b85600103612a185760001996505050505050506106e7565b600019909501946001909301925061298b565b6001600160801b031690565b600080600080612a478760801c90565b90506000612a5488612a2b565b905086860181811115612a7a576040516365f4e9df60e01b815260040160405180910390fd5b612a848389612ca1565b9450612a94818401828403612ca1565b93506001955050505093509350939050565b6060612ab182612a2b565b6001600160401b03811115612ac857612ac86131c2565b6040519080825280601f01601f191660200182016040528015612af2576020820181803683370190505b50905060208101612b1581612b078560801c90565b612b1086612a2b565b612cb4565b50919050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115612b485750600090506003612bcc565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b9c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bc557600060019250925050612bcc565b9150600090505b94509492505050565b600061129c8383612cc2565b600060208311612bfd57612bf6848484612cce565b905061129c565b83601f841680850382016000612c1286612dd1565b90505b81881015612c575787518118612c2a81612df9565b15612c4b57848903612c3e8a60208a612cce565b019550505050505061129c565b60208901985050612c15565b82600003612c6d5760001994505050505061129c565b612c78828488612cce565b94506000198503612c915760001994505050505061129c565b838203850194505050505061129c565b6001600160801b031660809190911b1790565b8083828460045afa50505050565b600061129c8383612e44565b8251600090816020851115612ce257602094505b60128510612d65576000612cf585612dd1565b83189050612d0b6001600160801b038217612df9565b600003612d415760109150601a8610612d3c57612d306001600160401b038217612df9565b600003612d3c57601891505b612d5f565b612d536001600160c01b038217612df9565b600003612d5f57600891505b50612d9c565b600a8510612d9c576000612d7885612dd1565b83189050612d8e6001600160c01b038217612df9565b600003612d9a57600891505b505b84811015612dc45781811a60ff85168103612dbb5750915061129c9050565b50600101612d9c565b5060001995945050505050565b60ff167f01010101010101010101010101010101010101010101010101010101010101010290565b7ffefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefeff81019019167f80808080808080808080808080808080808080808080808080808080808080801690565b60006001600160801b03831115612e6e5760405163fee7506f60e01b815260040160405180910390fd5b6001600160801b03821115612e9657604051633b6b098d60e01b815260040160405180910390fd5b506001600160801b031660809190911b1790565b6001600160e01b03198116811461100a57600080fd5b600060208284031215612ed257600080fd5b813561129c81612eaa565b60005b83811015612ef8578181015183820152602001612ee0565b50506000910152565b60008151808452612f19816020860160208601612edd565b601f01601f19169290920160200192915050565b60208152600061129c6020830184612f01565b600060208284031215612f5257600080fd5b5035919050565b6001600160a01b038116811461100a57600080fd5b60008060408385031215612f8157600080fd5b8235612f8c81612f59565b946020939093013593505050565b60008083601f840112612fac57600080fd5b5081356001600160401b03811115612fc357600080fd5b6020830191508360208285010111156122e057600080fd5b600080600080600060608688031215612ff357600080fd5b8535945060208601356001600160401b038082111561301157600080fd5b61301d89838a01612f9a565b9096509450604088013591508082111561303657600080fd5b5061304388828901612f9a565b969995985093965092949392505050565b600080600080600080600060a0888a03121561306f57600080fd5b873561307a81612f59565b965060208801356001600160401b038082111561309657600080fd5b6130a28b838c01612f9a565b909850965060408a0135955060608a0135945060808a01359150808211156130c957600080fd5b506130d68a828b01612f9a565b989b979a50959850939692959293505050565b6000806000606084860312156130fe57600080fd5b833561310981612f59565b9250602084013561311981612f59565b929592945050506040919091013590565b6000806040838503121561313d57600080fd5b82359150602083013561314f81612f59565b809150509250929050565b6000806040838503121561316d57600080fd5b82356001600160401b038082111561318457600080fd5b9084019060c0828703121561319857600080fd5b909250602084013590808211156131ae57600080fd5b508301610160818603121561314f57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613200576132006131c2565b604052919050565b60006001600160401b03831115613221576132216131c2565b613234601f8401601f19166020016131d8565b905082815283838301111561324857600080fd5b828260208301376000602084830101529392505050565b600082601f83011261327057600080fd5b61129c83833560208501613208565b600080600080600080600060c0888a03121561329a57600080fd5b8735965060208801356132ac81612f59565b955060408801356132bc81612f59565b945060608801356001600160401b03808211156132d857600080fd5b818a0191508a601f8301126132ec57600080fd5b8135818111156132fe576132fe6131c2565b8060051b61330e602082016131d8565b9182526020818501810192908101908e84111561332a57600080fd5b6020860192505b8383101561336857848335111561334757600080fd5b6133578f6020853589010161325f565b825260209283019290910190613331565b985050505060808a0135945060a08a01359150808211156130c957600080fd5b801515811461100a57600080fd5b600080604083850312156133a957600080fd5b82359150602083013561314f81613388565b6000602082840312156133cd57600080fd5b813561129c81612f59565b6020808252825182820181905260009190848201906040850190845b81811015613410578351835292840192918401916001016133f4565b50909695505050505050565b6000806040838503121561342f57600080fd5b823561343a81612f59565b9150602083013561314f81613388565b6000806000806080858703121561346057600080fd5b843561346b81612f59565b9350602085013561347b81612f59565b92506040850135915060608501356001600160401b0381111561349d57600080fd5b8501601f810187136134ae57600080fd5b6134bd87823560208401613208565b91505092959194509250565b60008083601f8401126134db57600080fd5b5081356001600160401b038111156134f257600080fd5b6020830191508360208260051b85010111156122e057600080fd5b6000806000806040858703121561352357600080fd5b84356001600160401b038082111561353a57600080fd5b613546888389016134c9565b9096509450602087013591508082111561355f57600080fd5b5061356c878288016134c9565b95989497509550505050565b6000806040838503121561358b57600080fd5b823561359681612f59565b915060208301356001600160401b038111156135b157600080fd5b6135bd8582860161325f565b9150509250929050565b602081528151602082015260006020830151608060408401526135ed60a0840182612f01565b9050604084015160608401526060840151601f198483030160808501526136148282612f01565b95945050505050565b6000806000806040858703121561363357600080fd5b84356001600160401b038082111561364a57600080fd5b61365688838901612f9a565b9096509450602087013591508082111561366f57600080fd5b5061356c87828801612f9a565b6000806040838503121561368f57600080fd5b823561369a81612f59565b9150602083013561314f81612f59565b600080604083850312156136bd57600080fd5b50508035926020909101359150565b600181811c908216806136e057607f821691505b602082108103612b1557634e487b7160e01b600052602260045260246000fd5b601f8211156108bb57600081815260208120601f850160051c810160208610156137275750805b601f850160051c820191505b8181101561374657828155600101613733565b505050505050565b600019600383901b1c191660019190911b1790565b6001600160401b0383111561377a5761377a6131c2565b61378e8361378883546136cc565b83613700565b6000601f8411600181146137bc57600085156137aa5750838201355b6137b4868261374e565b845550611ca2565b600083815260209020601f19861690835b828110156137ed57868501358255602094850194600190920191016137cd565b508682101561380a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60008154613829816136cc565b80855260206001838116801561384657600181146138605761388e565b60ff1985168884015283151560051b88018301955061388e565b866000528260002060005b858110156138865781548a820186015290830190840161386b565b890184019650505b505050505092915050565b8381526060602082015260006138b2606083018561381c565b8281036040840152611d00818561381c565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000808335601e1984360301811261392857600080fd5b8301803591506001600160401b0382111561394257600080fd5b6020019150368190038213156122e057600080fd5b8183823760009101908152919050565b600081356106e781612f59565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000813560ff811681146106e757600080fd5b6139b18283613911565b6139bc818385613763565b50506139cb6020830183613911565b6139d9818360018601613763565b5050600281016139f46139ee60408501613967565b82613974565b613a21613a0360608501613994565b82805460ff60a01b191660a09290921b60ff60a01b16919091179055565b50613a3a613a3160808401613967565b60038301613974565b60a0820135600482015560c08201356005820155613a72613a5d60e08401613994565b6006830160ff821660ff198254161781555050565b61010082013560078201556101208201356008820155613a96610140830183613911565b61105f818360098601613763565b613aae8283613911565b6001600160401b03811115613ac557613ac56131c2565b613ad981613ad385546136cc565b85613700565b6000601f821160018114613b075760008315613af55750838201355b613aff848261374e565b865550613b61565b600085815260209020601f19841690835b82811015613b385786850135825560209485019460019092019101613b18565b5084821015613b555760001960f88660031b161c19848701351681555b505060018360011b0185555b50505050613b7d613b7460208401613967565b60018301613974565b604082013560028201556060820135600382015560048101613ba46139ee60808501613967565b6108bb613a0360a08501613994565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0386168152606060208201819052600090613c019083018688613bb3565b8281036040840152613c14818587613bb3565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613c5e57613c5e613c36565b5060010190565b602080825260189082015277185d1d195cdd185d1a5bdb881a5cc81b9bdd08195e1a5cdd60421b604082015260600190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b600060208284031215613cdb57600080fd5b813561129c81613388565b6001600160a01b0386168152606060208083018290529082018590526000906001600160fb1b03861115613d1957600080fd5b8560051b808860808601378301838103608090810160408601528101859052859060009060a0015b86821015610cb2578235613d5481613388565b1515815291830191600191909101908301613d41565b60008351613d7c818460208801612edd565b835190830190613d90818360208801612edd565b01949350505050565b81516001600160401b03811115613db257613db26131c2565b613dc681613dc084546136cc565b84613700565b602080601f831160018114613df55760008415613de35750858301515b613ded858261374e565b865550613746565b600085815260208120601f198616915b82811015613e2457888601518255948401946001909101908401613e05565b5085821015613e425787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0387168152608060208201819052600090613e779083018789613bb3565b8560408401528281036060840152613e90818587613bb3565b9998505050505050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604082015260600190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351613fb2816017850160208801612edd565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613fe3816028840160208801612edd565b01602801949350505050565b82815260406020820152600061174c6040830184612f01565b6000825161401a818460208701612edd565b9190910192915050565b60006020828403121561403657600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611d0090830184612f01565b60006020828403121561408257600080fd5b815161129c81612eaa565b80820281158282048414176106e7576106e7613c36565b808201808211156106e7576106e7613c36565b6000816140c6576140c6613c36565b506000190190565b6000602082840312156140e057600080fd5b815161129c81613388565b818103818111156106e7576106e7613c3656fed16a327e6f5c32c69c8282ab355bc8a366432cf60ee1165bc5198414ca1b06c7ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea09a2646970667358221220013b345a32d1842fdb9023d40a65f000d5c57cdb947dc73e69c413c1d5822f9164736f6c63430008110033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Contract *ContractCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Contract *ContractSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Contract.Contract.DEFAULTADMINROLE(&_Contract.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Contract *ContractCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Contract.Contract.DEFAULTADMINROLE(&_Contract.CallOpts)
}

// TEEROLE is a free data retrieval call binding the contract method 0x495eb828.
//
// Solidity: function TEE_ROLE() view returns(bytes32)
func (_Contract *ContractCaller) TEEROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "TEE_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TEEROLE is a free data retrieval call binding the contract method 0x495eb828.
//
// Solidity: function TEE_ROLE() view returns(bytes32)
func (_Contract *ContractSession) TEEROLE() ([32]byte, error) {
	return _Contract.Contract.TEEROLE(&_Contract.CallOpts)
}

// TEEROLE is a free data retrieval call binding the contract method 0x495eb828.
//
// Solidity: function TEE_ROLE() view returns(bytes32)
func (_Contract *ContractCallerSession) TEEROLE() ([32]byte, error) {
	return _Contract.Contract.TEEROLE(&_Contract.CallOpts)
}

// VERIFIERROLE is a free data retrieval call binding the contract method 0xe7705db6.
//
// Solidity: function VERIFIER_ROLE() view returns(bytes32)
func (_Contract *ContractCaller) VERIFIERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "VERIFIER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VERIFIERROLE is a free data retrieval call binding the contract method 0xe7705db6.
//
// Solidity: function VERIFIER_ROLE() view returns(bytes32)
func (_Contract *ContractSession) VERIFIERROLE() ([32]byte, error) {
	return _Contract.Contract.VERIFIERROLE(&_Contract.CallOpts)
}

// VERIFIERROLE is a free data retrieval call binding the contract method 0xe7705db6.
//
// Solidity: function VERIFIER_ROLE() view returns(bytes32)
func (_Contract *ContractCallerSession) VERIFIERROLE() ([32]byte, error) {
	return _Contract.Contract.VERIFIERROLE(&_Contract.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.GetApproved(&_Contract.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.GetApproved(&_Contract.CallOpts, tokenId)
}

// GetIdentitiesRoot is a free data retrieval call binding the contract method 0x45692b82.
//
// Solidity: function getIdentitiesRoot(uint256 id) view returns(bytes32)
func (_Contract *ContractCaller) GetIdentitiesRoot(opts *bind.CallOpts, id *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getIdentitiesRoot", id)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetIdentitiesRoot is a free data retrieval call binding the contract method 0x45692b82.
//
// Solidity: function getIdentitiesRoot(uint256 id) view returns(bytes32)
func (_Contract *ContractSession) GetIdentitiesRoot(id *big.Int) ([32]byte, error) {
	return _Contract.Contract.GetIdentitiesRoot(&_Contract.CallOpts, id)
}

// GetIdentitiesRoot is a free data retrieval call binding the contract method 0x45692b82.
//
// Solidity: function getIdentitiesRoot(uint256 id) view returns(bytes32)
func (_Contract *ContractCallerSession) GetIdentitiesRoot(id *big.Int) ([32]byte, error) {
	return _Contract.Contract.GetIdentitiesRoot(&_Contract.CallOpts, id)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Contract *ContractCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Contract *ContractSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Contract.Contract.GetRoleAdmin(&_Contract.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Contract *ContractCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Contract.Contract.GetRoleAdmin(&_Contract.CallOpts, role)
}

// GetAttestationResult is a free data retrieval call binding the contract method 0xc8186fc2.
//
// Solidity: function get_attestation_result(bytes32 attestation_id, address attestation_address) view returns(bool)
func (_Contract *ContractCaller) GetAttestationResult(opts *bind.CallOpts, attestation_id [32]byte, attestation_address common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "get_attestation_result", attestation_id, attestation_address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetAttestationResult is a free data retrieval call binding the contract method 0xc8186fc2.
//
// Solidity: function get_attestation_result(bytes32 attestation_id, address attestation_address) view returns(bool)
func (_Contract *ContractSession) GetAttestationResult(attestation_id [32]byte, attestation_address common.Address) (bool, error) {
	return _Contract.Contract.GetAttestationResult(&_Contract.CallOpts, attestation_id, attestation_address)
}

// GetAttestationResult is a free data retrieval call binding the contract method 0xc8186fc2.
//
// Solidity: function get_attestation_result(bytes32 attestation_id, address attestation_address) view returns(bool)
func (_Contract *ContractCallerSession) GetAttestationResult(attestation_id [32]byte, attestation_address common.Address) (bool, error) {
	return _Contract.Contract.GetAttestationResult(&_Contract.CallOpts, attestation_id, attestation_address)
}

// GetMintByAddress is a free data retrieval call binding the contract method 0xc180ae2a.
//
// Solidity: function get_mint_by_address(address user_address) view returns(string)
func (_Contract *ContractCaller) GetMintByAddress(opts *bind.CallOpts, user_address common.Address) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "get_mint_by_address", user_address)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMintByAddress is a free data retrieval call binding the contract method 0xc180ae2a.
//
// Solidity: function get_mint_by_address(address user_address) view returns(string)
func (_Contract *ContractSession) GetMintByAddress(user_address common.Address) (string, error) {
	return _Contract.Contract.GetMintByAddress(&_Contract.CallOpts, user_address)
}

// GetMintByAddress is a free data retrieval call binding the contract method 0xc180ae2a.
//
// Solidity: function get_mint_by_address(address user_address) view returns(string)
func (_Contract *ContractCallerSession) GetMintByAddress(user_address common.Address) (string, error) {
	return _Contract.Contract.GetMintByAddress(&_Contract.CallOpts, user_address)
}

// GetProofList is a free data retrieval call binding the contract method 0x964b1f6e.
//
// Solidity: function get_proof_list() view returns(bytes32[])
func (_Contract *ContractCaller) GetProofList(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "get_proof_list")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetProofList is a free data retrieval call binding the contract method 0x964b1f6e.
//
// Solidity: function get_proof_list() view returns(bytes32[])
func (_Contract *ContractSession) GetProofList() ([][32]byte, error) {
	return _Contract.Contract.GetProofList(&_Contract.CallOpts)
}

// GetProofList is a free data retrieval call binding the contract method 0x964b1f6e.
//
// Solidity: function get_proof_list() view returns(bytes32[])
func (_Contract *ContractCallerSession) GetProofList() ([][32]byte, error) {
	return _Contract.Contract.GetProofList(&_Contract.CallOpts)
}

// GetUserByAddress is a free data retrieval call binding the contract method 0xda7a2928.
//
// Solidity: function get_user_by_address(address user_address) view returns((uint256,string,uint256,bytes))
func (_Contract *ContractCaller) GetUserByAddress(opts *bind.CallOpts, user_address common.Address) (CarvProtocalServiceuser, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "get_user_by_address", user_address)

	if err != nil {
		return *new(CarvProtocalServiceuser), err
	}

	out0 := *abi.ConvertType(out[0], new(CarvProtocalServiceuser)).(*CarvProtocalServiceuser)

	return out0, err

}

// GetUserByAddress is a free data retrieval call binding the contract method 0xda7a2928.
//
// Solidity: function get_user_by_address(address user_address) view returns((uint256,string,uint256,bytes))
func (_Contract *ContractSession) GetUserByAddress(user_address common.Address) (CarvProtocalServiceuser, error) {
	return _Contract.Contract.GetUserByAddress(&_Contract.CallOpts, user_address)
}

// GetUserByAddress is a free data retrieval call binding the contract method 0xda7a2928.
//
// Solidity: function get_user_by_address(address user_address) view returns((uint256,string,uint256,bytes))
func (_Contract *ContractCallerSession) GetUserByAddress(user_address common.Address) (CarvProtocalServiceuser, error) {
	return _Contract.Contract.GetUserByAddress(&_Contract.CallOpts, user_address)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Contract *ContractCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Contract *ContractSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Contract.Contract.HasRole(&_Contract.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Contract *ContractCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Contract.Contract.HasRole(&_Contract.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractSession) Name() (string, error) {
	return _Contract.Contract.Name(&_Contract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractCallerSession) Name() (string, error) {
	return _Contract.Contract.Name(&_Contract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.OwnerOf(&_Contract.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.OwnerOf(&_Contract.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCallerSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Contract.Contract.TokenURI(&_Contract.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Contract.Contract.TokenURI(&_Contract.CallOpts, tokenId)
}

// VerifyIdentitiesBinding is a free data retrieval call binding the contract method 0x49d03037.
//
// Solidity: function verifyIdentitiesBinding(uint256 id, address nftOwnerAddress, address sigAddress, string[] userIDs, bytes32 multiIdentitiesRoot, bytes signature) view returns(bool)
func (_Contract *ContractCaller) VerifyIdentitiesBinding(opts *bind.CallOpts, id *big.Int, nftOwnerAddress common.Address, sigAddress common.Address, userIDs []string, multiIdentitiesRoot [32]byte, signature []byte) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "verifyIdentitiesBinding", id, nftOwnerAddress, sigAddress, userIDs, multiIdentitiesRoot, signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyIdentitiesBinding is a free data retrieval call binding the contract method 0x49d03037.
//
// Solidity: function verifyIdentitiesBinding(uint256 id, address nftOwnerAddress, address sigAddress, string[] userIDs, bytes32 multiIdentitiesRoot, bytes signature) view returns(bool)
func (_Contract *ContractSession) VerifyIdentitiesBinding(id *big.Int, nftOwnerAddress common.Address, sigAddress common.Address, userIDs []string, multiIdentitiesRoot [32]byte, signature []byte) (bool, error) {
	return _Contract.Contract.VerifyIdentitiesBinding(&_Contract.CallOpts, id, nftOwnerAddress, sigAddress, userIDs, multiIdentitiesRoot, signature)
}

// VerifyIdentitiesBinding is a free data retrieval call binding the contract method 0x49d03037.
//
// Solidity: function verifyIdentitiesBinding(uint256 id, address nftOwnerAddress, address sigAddress, string[] userIDs, bytes32 multiIdentitiesRoot, bytes signature) view returns(bool)
func (_Contract *ContractCallerSession) VerifyIdentitiesBinding(id *big.Int, nftOwnerAddress common.Address, sigAddress common.Address, userIDs []string, multiIdentitiesRoot [32]byte, signature []byte) (bool, error) {
	return _Contract.Contract.VerifyIdentitiesBinding(&_Contract.CallOpts, id, nftOwnerAddress, sigAddress, userIDs, multiIdentitiesRoot, signature)
}

// CarvProtocalServiceInit is a paid mutator transaction binding the contract method 0x5a11aa64.
//
// Solidity: function __CarvProtocalService_init(address rewards_address) returns()
func (_Contract *ContractTransactor) CarvProtocalServiceInit(opts *bind.TransactOpts, rewards_address common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "__CarvProtocalService_init", rewards_address)
}

// CarvProtocalServiceInit is a paid mutator transaction binding the contract method 0x5a11aa64.
//
// Solidity: function __CarvProtocalService_init(address rewards_address) returns()
func (_Contract *ContractSession) CarvProtocalServiceInit(rewards_address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.CarvProtocalServiceInit(&_Contract.TransactOpts, rewards_address)
}

// CarvProtocalServiceInit is a paid mutator transaction binding the contract method 0x5a11aa64.
//
// Solidity: function __CarvProtocalService_init(address rewards_address) returns()
func (_Contract *ContractTransactorSession) CarvProtocalServiceInit(rewards_address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.CarvProtocalServiceInit(&_Contract.TransactOpts, rewards_address)
}

// AddTeeRole is a paid mutator transaction binding the contract method 0xa35d20be.
//
// Solidity: function add_tee_role(address tee_address) returns()
func (_Contract *ContractTransactor) AddTeeRole(opts *bind.TransactOpts, tee_address common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "add_tee_role", tee_address)
}

// AddTeeRole is a paid mutator transaction binding the contract method 0xa35d20be.
//
// Solidity: function add_tee_role(address tee_address) returns()
func (_Contract *ContractSession) AddTeeRole(tee_address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddTeeRole(&_Contract.TransactOpts, tee_address)
}

// AddTeeRole is a paid mutator transaction binding the contract method 0xa35d20be.
//
// Solidity: function add_tee_role(address tee_address) returns()
func (_Contract *ContractTransactorSession) AddTeeRole(tee_address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddTeeRole(&_Contract.TransactOpts, tee_address)
}

// AddVerifierRole is a paid mutator transaction binding the contract method 0xad86d545.
//
// Solidity: function add_verifier_role(address verifier_address) returns()
func (_Contract *ContractTransactor) AddVerifierRole(opts *bind.TransactOpts, verifier_address common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "add_verifier_role", verifier_address)
}

// AddVerifierRole is a paid mutator transaction binding the contract method 0xad86d545.
//
// Solidity: function add_verifier_role(address verifier_address) returns()
func (_Contract *ContractSession) AddVerifierRole(verifier_address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddVerifierRole(&_Contract.TransactOpts, verifier_address)
}

// AddVerifierRole is a paid mutator transaction binding the contract method 0xad86d545.
//
// Solidity: function add_verifier_role(address verifier_address) returns()
func (_Contract *ContractTransactorSession) AddVerifierRole(verifier_address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddVerifierRole(&_Contract.TransactOpts, verifier_address)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Approve(&_Contract.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Approve(&_Contract.TransactOpts, to, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Contract *ContractSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.GrantRole(&_Contract.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.GrantRole(&_Contract.TransactOpts, role, account)
}

// JoinCampaign is a paid mutator transaction binding the contract method 0x09a9c7f0.
//
// Solidity: function join_campaign(uint256 carv_id, string campaign_id, string join_campaign_info) returns()
func (_Contract *ContractTransactor) JoinCampaign(opts *bind.TransactOpts, carv_id *big.Int, campaign_id string, join_campaign_info string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "join_campaign", carv_id, campaign_id, join_campaign_info)
}

// JoinCampaign is a paid mutator transaction binding the contract method 0x09a9c7f0.
//
// Solidity: function join_campaign(uint256 carv_id, string campaign_id, string join_campaign_info) returns()
func (_Contract *ContractSession) JoinCampaign(carv_id *big.Int, campaign_id string, join_campaign_info string) (*types.Transaction, error) {
	return _Contract.Contract.JoinCampaign(&_Contract.TransactOpts, carv_id, campaign_id, join_campaign_info)
}

// JoinCampaign is a paid mutator transaction binding the contract method 0x09a9c7f0.
//
// Solidity: function join_campaign(uint256 carv_id, string campaign_id, string join_campaign_info) returns()
func (_Contract *ContractTransactorSession) JoinCampaign(carv_id *big.Int, campaign_id string, join_campaign_info string) (*types.Transaction, error) {
	return _Contract.Contract.JoinCampaign(&_Contract.TransactOpts, carv_id, campaign_id, join_campaign_info)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string uri) returns()
func (_Contract *ContractTransactor) Mint(opts *bind.TransactOpts, to common.Address, uri string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "mint", to, uri)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string uri) returns()
func (_Contract *ContractSession) Mint(to common.Address, uri string) (*types.Transaction, error) {
	return _Contract.Contract.Mint(&_Contract.TransactOpts, to, uri)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string uri) returns()
func (_Contract *ContractTransactorSession) Mint(to common.Address, uri string) (*types.Transaction, error) {
	return _Contract.Contract.Mint(&_Contract.TransactOpts, to, uri)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Contract *ContractSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RenounceRole(&_Contract.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RenounceRole(&_Contract.TransactOpts, role, account)
}

// ReportTeeAttestation is a paid mutator transaction binding the contract method 0xe97a9987.
//
// Solidity: function report_tee_attestation(string campaign_id, string attestation) returns()
func (_Contract *ContractTransactor) ReportTeeAttestation(opts *bind.TransactOpts, campaign_id string, attestation string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "report_tee_attestation", campaign_id, attestation)
}

// ReportTeeAttestation is a paid mutator transaction binding the contract method 0xe97a9987.
//
// Solidity: function report_tee_attestation(string campaign_id, string attestation) returns()
func (_Contract *ContractSession) ReportTeeAttestation(campaign_id string, attestation string) (*types.Transaction, error) {
	return _Contract.Contract.ReportTeeAttestation(&_Contract.TransactOpts, campaign_id, attestation)
}

// ReportTeeAttestation is a paid mutator transaction binding the contract method 0xe97a9987.
//
// Solidity: function report_tee_attestation(string campaign_id, string attestation) returns()
func (_Contract *ContractTransactorSession) ReportTeeAttestation(campaign_id string, attestation string) (*types.Transaction, error) {
	return _Contract.Contract.ReportTeeAttestation(&_Contract.TransactOpts, campaign_id, attestation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Contract *ContractSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RevokeRole(&_Contract.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RevokeRole(&_Contract.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom0(&_Contract.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom0(&_Contract.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetIdentitiesRoot is a paid mutator transaction binding the contract method 0xff30a118.
//
// Solidity: function setIdentitiesRoot(uint256 id, bytes32 multiIdentitiesRoot) returns()
func (_Contract *ContractTransactor) SetIdentitiesRoot(opts *bind.TransactOpts, id *big.Int, multiIdentitiesRoot [32]byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setIdentitiesRoot", id, multiIdentitiesRoot)
}

// SetIdentitiesRoot is a paid mutator transaction binding the contract method 0xff30a118.
//
// Solidity: function setIdentitiesRoot(uint256 id, bytes32 multiIdentitiesRoot) returns()
func (_Contract *ContractSession) SetIdentitiesRoot(id *big.Int, multiIdentitiesRoot [32]byte) (*types.Transaction, error) {
	return _Contract.Contract.SetIdentitiesRoot(&_Contract.TransactOpts, id, multiIdentitiesRoot)
}

// SetIdentitiesRoot is a paid mutator transaction binding the contract method 0xff30a118.
//
// Solidity: function setIdentitiesRoot(uint256 id, bytes32 multiIdentitiesRoot) returns()
func (_Contract *ContractTransactorSession) SetIdentitiesRoot(id *big.Int, multiIdentitiesRoot [32]byte) (*types.Transaction, error) {
	return _Contract.Contract.SetIdentitiesRoot(&_Contract.TransactOpts, id, multiIdentitiesRoot)
}

// SetIdentitiesRootExternal is a paid mutator transaction binding the contract method 0x1a7f9955.
//
// Solidity: function set_identities_root(address user_address, string user_profile_path, uint256 profile_version, bytes32 multiIdentitiesRoot, bytes signature) returns()
func (_Contract *ContractTransactor) SetIdentitiesRootExternal(opts *bind.TransactOpts, user_address common.Address, user_profile_path string, profile_version *big.Int, multiIdentitiesRoot [32]byte, signature []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "set_identities_root", user_address, user_profile_path, profile_version, multiIdentitiesRoot, signature)
}

// SetIdentitiesRootExternal is a paid mutator transaction binding the contract method 0x1a7f9955.
//
// Solidity: function set_identities_root(address user_address, string user_profile_path, uint256 profile_version, bytes32 multiIdentitiesRoot, bytes signature) returns()
func (_Contract *ContractSession) SetIdentitiesRootExternal(user_address common.Address, user_profile_path string, profile_version *big.Int, multiIdentitiesRoot [32]byte, signature []byte) (*types.Transaction, error) {
	return _Contract.Contract.SetIdentitiesRootExternal(&_Contract.TransactOpts, user_address, user_profile_path, profile_version, multiIdentitiesRoot, signature)
}

// SetIdentitiesRootExternal is a paid mutator transaction binding the contract method 0x1a7f9955.
//
// Solidity: function set_identities_root(address user_address, string user_profile_path, uint256 profile_version, bytes32 multiIdentitiesRoot, bytes signature) returns()
func (_Contract *ContractTransactorSession) SetIdentitiesRootExternal(user_address common.Address, user_profile_path string, profile_version *big.Int, multiIdentitiesRoot [32]byte, signature []byte) (*types.Transaction, error) {
	return _Contract.Contract.SetIdentitiesRootExternal(&_Contract.TransactOpts, user_address, user_profile_path, profile_version, multiIdentitiesRoot, signature)
}

// SubmitCampaign is a paid mutator transaction binding the contract method 0x3736c83f.
//
// Solidity: function submit_campaign((string,address,uint256,uint256,address,uint8) reward_info, (string,string,address,uint8,address,uint256,uint256,uint8,uint256,uint256,string) campaign_info) payable returns()
func (_Contract *ContractTransactor) SubmitCampaign(opts *bind.TransactOpts, reward_info CarvProtocalServicereward, campaign_info CarvProtocalServicecampaign) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "submit_campaign", reward_info, campaign_info)
}

// SubmitCampaign is a paid mutator transaction binding the contract method 0x3736c83f.
//
// Solidity: function submit_campaign((string,address,uint256,uint256,address,uint8) reward_info, (string,string,address,uint8,address,uint256,uint256,uint8,uint256,uint256,string) campaign_info) payable returns()
func (_Contract *ContractSession) SubmitCampaign(reward_info CarvProtocalServicereward, campaign_info CarvProtocalServicecampaign) (*types.Transaction, error) {
	return _Contract.Contract.SubmitCampaign(&_Contract.TransactOpts, reward_info, campaign_info)
}

// SubmitCampaign is a paid mutator transaction binding the contract method 0x3736c83f.
//
// Solidity: function submit_campaign((string,address,uint256,uint256,address,uint8) reward_info, (string,string,address,uint8,address,uint256,uint256,uint8,uint256,uint256,string) campaign_info) payable returns()
func (_Contract *ContractTransactorSession) SubmitCampaign(reward_info CarvProtocalServicereward, campaign_info CarvProtocalServicecampaign) (*types.Transaction, error) {
	return _Contract.Contract.SubmitCampaign(&_Contract.TransactOpts, reward_info, campaign_info)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// VerifyAttestation is a paid mutator transaction binding the contract method 0x578907ca.
//
// Solidity: function verify_attestation(bytes32 attestation_id, bool result) returns()
func (_Contract *ContractTransactor) VerifyAttestation(opts *bind.TransactOpts, attestation_id [32]byte, result bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "verify_attestation", attestation_id, result)
}

// VerifyAttestation is a paid mutator transaction binding the contract method 0x578907ca.
//
// Solidity: function verify_attestation(bytes32 attestation_id, bool result) returns()
func (_Contract *ContractSession) VerifyAttestation(attestation_id [32]byte, result bool) (*types.Transaction, error) {
	return _Contract.Contract.VerifyAttestation(&_Contract.TransactOpts, attestation_id, result)
}

// VerifyAttestation is a paid mutator transaction binding the contract method 0x578907ca.
//
// Solidity: function verify_attestation(bytes32 attestation_id, bool result) returns()
func (_Contract *ContractTransactorSession) VerifyAttestation(attestation_id [32]byte, result bool) (*types.Transaction, error) {
	return _Contract.Contract.VerifyAttestation(&_Contract.TransactOpts, attestation_id, result)
}

// VerifyAttestationBatch is a paid mutator transaction binding the contract method 0xc1f75848.
//
// Solidity: function verify_attestation_batch(bytes32[] attestation_ids, bool[] results) returns()
func (_Contract *ContractTransactor) VerifyAttestationBatch(opts *bind.TransactOpts, attestation_ids [][32]byte, results []bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "verify_attestation_batch", attestation_ids, results)
}

// VerifyAttestationBatch is a paid mutator transaction binding the contract method 0xc1f75848.
//
// Solidity: function verify_attestation_batch(bytes32[] attestation_ids, bool[] results) returns()
func (_Contract *ContractSession) VerifyAttestationBatch(attestation_ids [][32]byte, results []bool) (*types.Transaction, error) {
	return _Contract.Contract.VerifyAttestationBatch(&_Contract.TransactOpts, attestation_ids, results)
}

// VerifyAttestationBatch is a paid mutator transaction binding the contract method 0xc1f75848.
//
// Solidity: function verify_attestation_batch(bytes32[] attestation_ids, bool[] results) returns()
func (_Contract *ContractTransactorSession) VerifyAttestationBatch(attestation_ids [][32]byte, results []bool) (*types.Transaction, error) {
	return _Contract.Contract.VerifyAttestationBatch(&_Contract.TransactOpts, attestation_ids, results)
}

// ContractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Contract contract.
type ContractApprovalIterator struct {
	Event *ContractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApproval represents a Approval event raised by the Contract contract.
type ContractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ContractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalIterator{contract: _Contract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApproval)
				if err := _Contract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) ParseApproval(log types.Log) (*ContractApproval, error) {
	event := new(ContractApproval)
	if err := _Contract.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Contract contract.
type ContractApprovalForAllIterator struct {
	Event *ContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApprovalForAll represents a ApprovalForAll event raised by the Contract contract.
type ContractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ContractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalForAllIterator{contract: _Contract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ContractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApprovalForAll)
				if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) ParseApprovalForAll(log types.Log) (*ContractApprovalForAll, error) {
	event := new(ContractApprovalForAll)
	if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Contract contract.
type ContractInitializedIterator struct {
	Event *ContractInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractInitialized represents a Initialized event raised by the Contract contract.
type ContractInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Contract *ContractFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractInitializedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractInitializedIterator{contract: _Contract.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Contract *ContractFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractInitialized) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractInitialized)
				if err := _Contract.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Contract *ContractFilterer) ParseInitialized(log types.Log) (*ContractInitialized, error) {
	event := new(ContractInitialized)
	if err := _Contract.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMintedIterator is returned from FilterMinted and is used to iterate over the raw logs and unpacked data for Minted events raised by the Contract contract.
type ContractMintedIterator struct {
	Event *ContractMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMinted represents a Minted event raised by the Contract contract.
type ContractMinted struct {
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinted is a free log retrieval operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address to, uint256 token_id)
func (_Contract *ContractFilterer) FilterMinted(opts *bind.FilterOpts) (*ContractMintedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Minted")
	if err != nil {
		return nil, err
	}
	return &ContractMintedIterator{contract: _Contract.contract, event: "Minted", logs: logs, sub: sub}, nil
}

// WatchMinted is a free log subscription operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address to, uint256 token_id)
func (_Contract *ContractFilterer) WatchMinted(opts *bind.WatchOpts, sink chan<- *ContractMinted) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Minted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMinted)
				if err := _Contract.contract.UnpackLog(event, "Minted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinted is a log parse operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address to, uint256 token_id)
func (_Contract *ContractFilterer) ParseMinted(log types.Log) (*ContractMinted, error) {
	event := new(ContractMinted)
	if err := _Contract.contract.UnpackLog(event, "Minted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractReportTeeAttestationIterator is returned from FilterReportTeeAttestation and is used to iterate over the raw logs and unpacked data for ReportTeeAttestation events raised by the Contract contract.
type ContractReportTeeAttestationIterator struct {
	Event *ContractReportTeeAttestation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractReportTeeAttestationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractReportTeeAttestation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractReportTeeAttestation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractReportTeeAttestationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractReportTeeAttestationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractReportTeeAttestation represents a ReportTeeAttestation event raised by the Contract contract.
type ContractReportTeeAttestation struct {
	TeeAddress    common.Address
	CampaignId    string
	AttestationId [32]byte
	Attestation   string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterReportTeeAttestation is a free log retrieval operation binding the contract event 0x99a038e9d345d0b12130b3b1fb003bf8f2d3a5c27ce2a800bbb1608efff6c591.
//
// Solidity: event ReportTeeAttestation(address tee_address, string campaign_id, bytes32 attestation_id, string attestation)
func (_Contract *ContractFilterer) FilterReportTeeAttestation(opts *bind.FilterOpts) (*ContractReportTeeAttestationIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ReportTeeAttestation")
	if err != nil {
		return nil, err
	}
	return &ContractReportTeeAttestationIterator{contract: _Contract.contract, event: "ReportTeeAttestation", logs: logs, sub: sub}, nil
}

// WatchReportTeeAttestation is a free log subscription operation binding the contract event 0x99a038e9d345d0b12130b3b1fb003bf8f2d3a5c27ce2a800bbb1608efff6c591.
//
// Solidity: event ReportTeeAttestation(address tee_address, string campaign_id, bytes32 attestation_id, string attestation)
func (_Contract *ContractFilterer) WatchReportTeeAttestation(opts *bind.WatchOpts, sink chan<- *ContractReportTeeAttestation) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ReportTeeAttestation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractReportTeeAttestation)
				if err := _Contract.contract.UnpackLog(event, "ReportTeeAttestation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReportTeeAttestation is a log parse operation binding the contract event 0x99a038e9d345d0b12130b3b1fb003bf8f2d3a5c27ce2a800bbb1608efff6c591.
//
// Solidity: event ReportTeeAttestation(address tee_address, string campaign_id, bytes32 attestation_id, string attestation)
func (_Contract *ContractFilterer) ParseReportTeeAttestation(log types.Log) (*ContractReportTeeAttestation, error) {
	event := new(ContractReportTeeAttestation)
	if err := _Contract.contract.UnpackLog(event, "ReportTeeAttestation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRewardPayedIterator is returned from FilterRewardPayed and is used to iterate over the raw logs and unpacked data for RewardPayed events raised by the Contract contract.
type ContractRewardPayedIterator struct {
	Event *ContractRewardPayed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRewardPayedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRewardPayed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRewardPayed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRewardPayedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRewardPayedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRewardPayed represents a RewardPayed event raised by the Contract contract.
type ContractRewardPayed struct {
	Erc20Address common.Address
	FromAddress  common.Address
	ToAddress    common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardPayed is a free log retrieval operation binding the contract event 0x704db66c978a7472842ddae0d478a8a7d123fb6ad449e4426b5e0f6a22081de7.
//
// Solidity: event RewardPayed(address erc20_address, address from_address, address to_address, uint256 amount)
func (_Contract *ContractFilterer) FilterRewardPayed(opts *bind.FilterOpts) (*ContractRewardPayedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RewardPayed")
	if err != nil {
		return nil, err
	}
	return &ContractRewardPayedIterator{contract: _Contract.contract, event: "RewardPayed", logs: logs, sub: sub}, nil
}

// WatchRewardPayed is a free log subscription operation binding the contract event 0x704db66c978a7472842ddae0d478a8a7d123fb6ad449e4426b5e0f6a22081de7.
//
// Solidity: event RewardPayed(address erc20_address, address from_address, address to_address, uint256 amount)
func (_Contract *ContractFilterer) WatchRewardPayed(opts *bind.WatchOpts, sink chan<- *ContractRewardPayed) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RewardPayed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRewardPayed)
				if err := _Contract.contract.UnpackLog(event, "RewardPayed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardPayed is a log parse operation binding the contract event 0x704db66c978a7472842ddae0d478a8a7d123fb6ad449e4426b5e0f6a22081de7.
//
// Solidity: event RewardPayed(address erc20_address, address from_address, address to_address, uint256 amount)
func (_Contract *ContractFilterer) ParseRewardPayed(log types.Log) (*ContractRewardPayed, error) {
	event := new(ContractRewardPayed)
	if err := _Contract.contract.UnpackLog(event, "RewardPayed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Contract contract.
type ContractRoleAdminChangedIterator struct {
	Event *ContractRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRoleAdminChanged represents a RoleAdminChanged event raised by the Contract contract.
type ContractRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Contract *ContractFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ContractRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ContractRoleAdminChangedIterator{contract: _Contract.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Contract *ContractFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ContractRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRoleAdminChanged)
				if err := _Contract.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Contract *ContractFilterer) ParseRoleAdminChanged(log types.Log) (*ContractRoleAdminChanged, error) {
	event := new(ContractRoleAdminChanged)
	if err := _Contract.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Contract contract.
type ContractRoleGrantedIterator struct {
	Event *ContractRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRoleGranted represents a RoleGranted event raised by the Contract contract.
type ContractRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ContractRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ContractRoleGrantedIterator{contract: _Contract.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ContractRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRoleGranted)
				if err := _Contract.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) ParseRoleGranted(log types.Log) (*ContractRoleGranted, error) {
	event := new(ContractRoleGranted)
	if err := _Contract.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Contract contract.
type ContractRoleRevokedIterator struct {
	Event *ContractRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRoleRevoked represents a RoleRevoked event raised by the Contract contract.
type ContractRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ContractRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ContractRoleRevokedIterator{contract: _Contract.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ContractRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRoleRevoked)
				if err := _Contract.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) ParseRoleRevoked(log types.Log) (*ContractRoleRevoked, error) {
	event := new(ContractRoleRevoked)
	if err := _Contract.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSetIdentitiesRootIterator is returned from FilterSetIdentitiesRoot and is used to iterate over the raw logs and unpacked data for SetIdentitiesRoot events raised by the Contract contract.
type ContractSetIdentitiesRootIterator struct {
	Event *ContractSetIdentitiesRoot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSetIdentitiesRootIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSetIdentitiesRoot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSetIdentitiesRoot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSetIdentitiesRootIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSetIdentitiesRootIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSetIdentitiesRoot represents a SetIdentitiesRoot event raised by the Contract contract.
type ContractSetIdentitiesRoot struct {
	Id             *big.Int
	IdentitiesRoot [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSetIdentitiesRoot is a free log retrieval operation binding the contract event 0x21b5a040ca6f61b8bcacb8f423e25ce46e88932f887ce92e60343369c20ec06f.
//
// Solidity: event SetIdentitiesRoot(uint256 id, bytes32 identitiesRoot)
func (_Contract *ContractFilterer) FilterSetIdentitiesRoot(opts *bind.FilterOpts) (*ContractSetIdentitiesRootIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "SetIdentitiesRoot")
	if err != nil {
		return nil, err
	}
	return &ContractSetIdentitiesRootIterator{contract: _Contract.contract, event: "SetIdentitiesRoot", logs: logs, sub: sub}, nil
}

// WatchSetIdentitiesRoot is a free log subscription operation binding the contract event 0x21b5a040ca6f61b8bcacb8f423e25ce46e88932f887ce92e60343369c20ec06f.
//
// Solidity: event SetIdentitiesRoot(uint256 id, bytes32 identitiesRoot)
func (_Contract *ContractFilterer) WatchSetIdentitiesRoot(opts *bind.WatchOpts, sink chan<- *ContractSetIdentitiesRoot) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "SetIdentitiesRoot")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSetIdentitiesRoot)
				if err := _Contract.contract.UnpackLog(event, "SetIdentitiesRoot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetIdentitiesRoot is a log parse operation binding the contract event 0x21b5a040ca6f61b8bcacb8f423e25ce46e88932f887ce92e60343369c20ec06f.
//
// Solidity: event SetIdentitiesRoot(uint256 id, bytes32 identitiesRoot)
func (_Contract *ContractFilterer) ParseSetIdentitiesRoot(log types.Log) (*ContractSetIdentitiesRoot, error) {
	event := new(ContractSetIdentitiesRoot)
	if err := _Contract.contract.UnpackLog(event, "SetIdentitiesRoot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSubmitCampaignIterator is returned from FilterSubmitCampaign and is used to iterate over the raw logs and unpacked data for SubmitCampaign events raised by the Contract contract.
type ContractSubmitCampaignIterator struct {
	Event *ContractSubmitCampaign // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSubmitCampaignIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSubmitCampaign)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSubmitCampaign)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSubmitCampaignIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSubmitCampaignIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSubmitCampaign represents a SubmitCampaign event raised by the Contract contract.
type ContractSubmitCampaign struct {
	ContractAddress common.Address
	CampaignId      string
	Requirements    string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSubmitCampaign is a free log retrieval operation binding the contract event 0xe8e692af5f416c4637c9307d7f08b7697fd8f4398f55103ce03ddd9388ccd84d.
//
// Solidity: event SubmitCampaign(address contract_address, string campaign_id, string requirements)
func (_Contract *ContractFilterer) FilterSubmitCampaign(opts *bind.FilterOpts) (*ContractSubmitCampaignIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "SubmitCampaign")
	if err != nil {
		return nil, err
	}
	return &ContractSubmitCampaignIterator{contract: _Contract.contract, event: "SubmitCampaign", logs: logs, sub: sub}, nil
}

// WatchSubmitCampaign is a free log subscription operation binding the contract event 0xe8e692af5f416c4637c9307d7f08b7697fd8f4398f55103ce03ddd9388ccd84d.
//
// Solidity: event SubmitCampaign(address contract_address, string campaign_id, string requirements)
func (_Contract *ContractFilterer) WatchSubmitCampaign(opts *bind.WatchOpts, sink chan<- *ContractSubmitCampaign) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "SubmitCampaign")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSubmitCampaign)
				if err := _Contract.contract.UnpackLog(event, "SubmitCampaign", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitCampaign is a log parse operation binding the contract event 0xe8e692af5f416c4637c9307d7f08b7697fd8f4398f55103ce03ddd9388ccd84d.
//
// Solidity: event SubmitCampaign(address contract_address, string campaign_id, string requirements)
func (_Contract *ContractFilterer) ParseSubmitCampaign(log types.Log) (*ContractSubmitCampaign, error) {
	event := new(ContractSubmitCampaign)
	if err := _Contract.contract.UnpackLog(event, "SubmitCampaign", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Contract contract.
type ContractTransferIterator struct {
	Event *ContractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTransfer represents a Transfer event raised by the Contract contract.
type ContractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ContractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractTransferIterator{contract: _Contract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTransfer)
				if err := _Contract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) ParseTransfer(log types.Log) (*ContractTransfer, error) {
	event := new(ContractTransfer)
	if err := _Contract.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractUserCampaignDataIterator is returned from FilterUserCampaignData and is used to iterate over the raw logs and unpacked data for UserCampaignData events raised by the Contract contract.
type ContractUserCampaignDataIterator struct {
	Event *ContractUserCampaignData // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractUserCampaignDataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractUserCampaignData)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractUserCampaignData)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractUserCampaignDataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractUserCampaignDataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractUserCampaignData represents a UserCampaignData event raised by the Contract contract.
type ContractUserCampaignData struct {
	CarvId       *big.Int
	CampaignId   string
	CampaignInfo string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUserCampaignData is a free log retrieval operation binding the contract event 0x83eda6edb918aac3f35c8d616a6198dbb75eeca3248e0efec05e66a30d511191.
//
// Solidity: event UserCampaignData(uint256 carv_id, string campaign_id, string campaign_info)
func (_Contract *ContractFilterer) FilterUserCampaignData(opts *bind.FilterOpts) (*ContractUserCampaignDataIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "UserCampaignData")
	if err != nil {
		return nil, err
	}
	return &ContractUserCampaignDataIterator{contract: _Contract.contract, event: "UserCampaignData", logs: logs, sub: sub}, nil
}

// WatchUserCampaignData is a free log subscription operation binding the contract event 0x83eda6edb918aac3f35c8d616a6198dbb75eeca3248e0efec05e66a30d511191.
//
// Solidity: event UserCampaignData(uint256 carv_id, string campaign_id, string campaign_info)
func (_Contract *ContractFilterer) WatchUserCampaignData(opts *bind.WatchOpts, sink chan<- *ContractUserCampaignData) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "UserCampaignData")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractUserCampaignData)
				if err := _Contract.contract.UnpackLog(event, "UserCampaignData", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserCampaignData is a log parse operation binding the contract event 0x83eda6edb918aac3f35c8d616a6198dbb75eeca3248e0efec05e66a30d511191.
//
// Solidity: event UserCampaignData(uint256 carv_id, string campaign_id, string campaign_info)
func (_Contract *ContractFilterer) ParseUserCampaignData(log types.Log) (*ContractUserCampaignData, error) {
	event := new(ContractUserCampaignData)
	if err := _Contract.contract.UnpackLog(event, "UserCampaignData", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractVerifyAttestationIterator is returned from FilterVerifyAttestation and is used to iterate over the raw logs and unpacked data for VerifyAttestation events raised by the Contract contract.
type ContractVerifyAttestationIterator struct {
	Event *ContractVerifyAttestation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractVerifyAttestationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractVerifyAttestation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractVerifyAttestation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractVerifyAttestationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractVerifyAttestationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractVerifyAttestation represents a VerifyAttestation event raised by the Contract contract.
type ContractVerifyAttestation struct {
	VerifierAddress common.Address
	AttestationId   [32]byte
	Result          bool
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterVerifyAttestation is a free log retrieval operation binding the contract event 0x937b4d1b5b461852fdbbb174b68adefb42155e668c05a1261fae11a2d22a240a.
//
// Solidity: event VerifyAttestation(address verifier_address, bytes32 attestation_id, bool result)
func (_Contract *ContractFilterer) FilterVerifyAttestation(opts *bind.FilterOpts) (*ContractVerifyAttestationIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "VerifyAttestation")
	if err != nil {
		return nil, err
	}
	return &ContractVerifyAttestationIterator{contract: _Contract.contract, event: "VerifyAttestation", logs: logs, sub: sub}, nil
}

// WatchVerifyAttestation is a free log subscription operation binding the contract event 0x937b4d1b5b461852fdbbb174b68adefb42155e668c05a1261fae11a2d22a240a.
//
// Solidity: event VerifyAttestation(address verifier_address, bytes32 attestation_id, bool result)
func (_Contract *ContractFilterer) WatchVerifyAttestation(opts *bind.WatchOpts, sink chan<- *ContractVerifyAttestation) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "VerifyAttestation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractVerifyAttestation)
				if err := _Contract.contract.UnpackLog(event, "VerifyAttestation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyAttestation is a log parse operation binding the contract event 0x937b4d1b5b461852fdbbb174b68adefb42155e668c05a1261fae11a2d22a240a.
//
// Solidity: event VerifyAttestation(address verifier_address, bytes32 attestation_id, bool result)
func (_Contract *ContractFilterer) ParseVerifyAttestation(log types.Log) (*ContractVerifyAttestation, error) {
	event := new(ContractVerifyAttestation)
	if err := _Contract.contract.UnpackLog(event, "VerifyAttestation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractVerifyAttestationBatchIterator is returned from FilterVerifyAttestationBatch and is used to iterate over the raw logs and unpacked data for VerifyAttestationBatch events raised by the Contract contract.
type ContractVerifyAttestationBatchIterator struct {
	Event *ContractVerifyAttestationBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractVerifyAttestationBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractVerifyAttestationBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractVerifyAttestationBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractVerifyAttestationBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractVerifyAttestationBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractVerifyAttestationBatch represents a VerifyAttestationBatch event raised by the Contract contract.
type ContractVerifyAttestationBatch struct {
	VerifierAddress common.Address
	AttestationIds  [][32]byte
	Results         []bool
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterVerifyAttestationBatch is a free log retrieval operation binding the contract event 0x04798cc2c828443d2d9ef127deaa1f73e782d8a9fffbc9db2bcca53e12765af5.
//
// Solidity: event VerifyAttestationBatch(address verifier_address, bytes32[] attestation_ids, bool[] results)
func (_Contract *ContractFilterer) FilterVerifyAttestationBatch(opts *bind.FilterOpts) (*ContractVerifyAttestationBatchIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "VerifyAttestationBatch")
	if err != nil {
		return nil, err
	}
	return &ContractVerifyAttestationBatchIterator{contract: _Contract.contract, event: "VerifyAttestationBatch", logs: logs, sub: sub}, nil
}

// WatchVerifyAttestationBatch is a free log subscription operation binding the contract event 0x04798cc2c828443d2d9ef127deaa1f73e782d8a9fffbc9db2bcca53e12765af5.
//
// Solidity: event VerifyAttestationBatch(address verifier_address, bytes32[] attestation_ids, bool[] results)
func (_Contract *ContractFilterer) WatchVerifyAttestationBatch(opts *bind.WatchOpts, sink chan<- *ContractVerifyAttestationBatch) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "VerifyAttestationBatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractVerifyAttestationBatch)
				if err := _Contract.contract.UnpackLog(event, "VerifyAttestationBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyAttestationBatch is a log parse operation binding the contract event 0x04798cc2c828443d2d9ef127deaa1f73e782d8a9fffbc9db2bcca53e12765af5.
//
// Solidity: event VerifyAttestationBatch(address verifier_address, bytes32[] attestation_ids, bool[] results)
func (_Contract *ContractFilterer) ParseVerifyAttestationBatch(log types.Log) (*ContractVerifyAttestationBatch, error) {
	event := new(ContractVerifyAttestationBatch)
	if err := _Contract.contract.UnpackLog(event, "VerifyAttestationBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
